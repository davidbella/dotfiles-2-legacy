### PREFIX
# remap prefix to Control + a
set -g prefix C-a
# allows you to type 'ctrl-a a' for 'ctrl-a' to go to the beginning of the line
bind a send-prefix
# allows 'ctrl-a ctrl-a' to move to next window
bind-key C-a next-window
# also map ctrl-b for legacy usage
set -g prefix2 C-b


set -g default-terminal "tmux-256color"

### ON DESTROY
# Switch to another session when closing last pane of session
set-option -g detach-on-destroy off


### RELOAD
# Reload tmux configuration
bind R source-file ~/.tmux.conf \; display-message "Config reloaded..."
bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."

### NVIM FIX
# This allows neovim to go into command mode instantly
set -sg escape-time 10


### STATUS BAR
# Status bar at top
set -g status-position top

# Update status bar every second
set -g status-interval 1

# no background
set -g status-bg default
set -g status-fg white

# style
set -g status-justify left
set -g status-left " [ #S ] "
set -g status-left-length 60
set -g window-status-current-fg "#d8af5f"
set -g window-status-current-bg "#3b3b3b"
set -g window-status-format "  #I] #W  "
set -g window-status-current-format "  #I] #W  "
set -g status-right-length 150
set -g status-right "%F %A %r "

setw -g pane-border-status top
setw -g pane-active-border-fg "#3a3a3a"
setw -g pane-inactive-border-fg "#3a3a3a"
# display a message?
# setw -g pane-border-format ' [ #(~/bin/message.sh) ] '

### OTHER
# Opens new panes in the same directory
bind-key c new-window -c '#{pane_current_path}'


# act like vim for movement between panes
setw -g mode-keys vi
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# More natural looking split keys
bind % split-window -h -c '#{pane_current_path}'
bind | split-window -h -c '#{pane_current_path}'
bind "\"" split-window -v -c '#{pane_current_path}'
bind - split-window -v -c '#{pane_current_path}'

# S for a new session
bind S new-session

# Increase scrollback limit
set -g history-limit 10000000

# Mouse
set -g mouse on

### COPY PASTA
# Copy tmux buffer to system clipboard after mouse drag
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"

# vim like bindings
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"

### OLD BIND KEY VS NEW BIND KEY EXAMPLE
# this:
# bind-key -t vi-copy 'v' begin-selection
# becomes this:
# bind-key -T copy-mode-vi v send-keys -X begin-selection
